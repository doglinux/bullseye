.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "WWW::YoutubeViewer::GuideCategories 3pm"
.TH WWW::YoutubeViewer::GuideCategories 3pm "2020-11-12" "perl v5.30.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
WWW::YoutubeViewer::GuideCategories \- Categories interface.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use WWW::YoutubeViewer;
\&    my $obj = WWW::YoutubeViewer\->new(%opts);
\&    my $videos = $obj\->youtube_categories(\*(AqUS\*(Aq);
.Ve
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.SS "guide_categories(;$region_id)"
.IX Subsection "guide_categories(;$region_id)"
Return guide categories for a specific region \s-1ID.\s0
.PP
.Vb 10
\&    items => [
\&               {
\&                 etag => "...",
\&                 id => "GCQmVzdCBvZiBZb3VUdWJl",
\&                 kind => "youtube#guideCategory",
\&                 snippet => {
\&                   channelId => "UCBR8\-60\-B28hp2BmDPdntcQ",
\&                   title => "Best of YouTube"
\&                 },
\&               },
\&                    ...
\&               {
\&                 etag => "...",
\&                 id => "GCU2NpZW5jZSAmIEVkdWNhdGlvbg",
\&                 kind => "youtube#guideCategory",
\&                 snippet => {
\&                   channelId => "UCBR8\-60\-B28hp2BmDPdntcQ",
\&                   title => "Science & Education",
\&                 },
\&               },
\&                    ...
\&            ]
.Ve
.SS "guide_categories_info($category_id)"
.IX Subsection "guide_categories_info($category_id)"
Return info for a list of comma-separated category IDs.
.SH "AUTHOR"
.IX Header "AUTHOR"
Trizen, \f(CW\*(C`<echo dHJpemVuQHByb3Rvbm1haWwuY29tCg== | base64 \-d>\*(C'\fR
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc WWW::YoutubeViewer::GuideCategories
.Ve
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2013\-2015 Trizen.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of either: the \s-1GNU\s0 General Public License as published
by the Free Software Foundation; or the Artistic License.
.PP
See <http://dev.perl.org/licenses/> for more information.
