.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "WWW::YoutubeViewer::Authentication 3pm"
.TH WWW::YoutubeViewer::Authentication 3pm "2020-11-12" "perl v5.30.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
WWW::YoutubeViewer::Authentication \- OAuth login support.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use WWW::YoutubeViewer;
\&    my $hash_ref = WWW::YoutubeViewer\->oauth_login($code);
.Ve
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.SS "\fBoauth_refresh_token()\fP"
.IX Subsection "oauth_refresh_token()"
Refresh the access_token using the refresh_token. Returns a \s-1HASH\s0 ref with the `access_token` or undef.
.SS "\fBget_accounts_oauth_url()\fP"
.IX Subsection "get_accounts_oauth_url()"
Creates an OAuth \s-1URL\s0 with the 'code' response type. (Google's authorization server)
.SS "oauth_login($code)"
.IX Subsection "oauth_login($code)"
Returns a \s-1HASH\s0 ref with the access_token, refresh_token and some other info.
.PP
The \f(CW$code\fR can be obtained by going to the \s-1URL\s0 returned by the \f(CW\*(C`get_accounts_oauth_url()\*(C'\fR method.
.SS "\fBload_authentication_tokens()\fP"
.IX Subsection "load_authentication_tokens()"
Will try to load the access and refresh tokens from \fIauthentication_file\fR.
.SS "encode_token($token)"
.IX Subsection "encode_token($token)"
Encode the token with the \fIkey\fR and return it.
.SS "decode_token($token)"
.IX Subsection "decode_token($token)"
Decode the token with the \fIkey\fR and return it.
.SS "\fBsave_authentication_tokens()\fP"
.IX Subsection "save_authentication_tokens()"
Encode and save the access and refresh into the \fIauthentication_file\fR.
.SS "load_credentials($file)"
.IX Subsection "load_credentials($file)"
Load the \s-1API\s0 key and the client \s-1ID/SECRET\s0 values from a given \s-1JSON\s0 file having the following format:
.PP
.Vb 5
\&    {
\&        "key":           "API_KEY",
\&        "client_id":     "CLIENT_ID",
\&        "client_secret": "CLIENT_SECRET"
\&    }
.Ve
.PP
Returns true on success and false otherwise.
.SH "AUTHOR"
.IX Header "AUTHOR"
Trizen, \f(CW\*(C`<echo dHJpemVuQHByb3Rvbm1haWwuY29tCg== | base64 \-d>\*(C'\fR
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc WWW::YoutubeViewer::Authentication
.Ve
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2013\-2015 Trizen.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of either: the \s-1GNU\s0 General Public License as published
by the Free Software Foundation; or the Artistic License.
.PP
See <http://dev.perl.org/licenses/> for more information.
