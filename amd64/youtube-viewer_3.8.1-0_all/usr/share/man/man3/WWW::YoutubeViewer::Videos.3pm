.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "WWW::YoutubeViewer::Videos 3pm"
.TH WWW::YoutubeViewer::Videos 3pm "2020-11-12" "perl v5.30.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
WWW::YoutubeViewer::Videos \- videos handler.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use WWW::YoutubeViewer;
\&    my $obj = WWW::YoutubeViewer\->new(%opts);
\&    my $info = $obj\->video_details($videoID);
.Ve
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.SS "videos_from_category($category_id)"
.IX Subsection "videos_from_category($category_id)"
Get videos from a category \s-1ID.\s0
.SS "trending_videos_from_category($category_id)"
.IX Subsection "trending_videos_from_category($category_id)"
Get popular videos from a category \s-1ID.\s0
.SS "popular_videos($channel_id)"
.IX Subsection "popular_videos($channel_id)"
Get the most popular videos for a given channel \s-1ID.\s0
.SS "\fBmy_likes()\fP"
.IX Subsection "my_likes()"
Get the videos liked by the authenticated user.
.SS "\fBmy_dislikes()\fP"
.IX Subsection "my_dislikes()"
Get the videos disliked by the authenticated user.
.ie n .SS "send_rating_to_video($videoID, $rating)"
.el .SS "send_rating_to_video($videoID, \f(CW$rating\fP)"
.IX Subsection "send_rating_to_video($videoID, $rating)"
Send rating to a video. \f(CW$rating\fR can be either 'like' or 'dislike'.
.SS "like_video($videoID)"
.IX Subsection "like_video($videoID)"
Like a video. Returns true on success.
.SS "dislike_video($videoID)"
.IX Subsection "dislike_video($videoID)"
Dislike a video. Returns true on success.
.ie n .SS "videos_details($id, $part)"
.el .SS "videos_details($id, \f(CW$part\fP)"
.IX Subsection "videos_details($id, $part)"
Get info about a videoID, such as: channelId, title, description,
tags, and categoryId.
.PP
Available values for \fIpart\fR are: \fIid\fR, \fIsnippet\fR, \fIcontentDetails\fR
\&\fIplayer\fR, \fIstatistics\fR, \fIstatus\fR and \fItopicDetails\fR.
.PP
\&\f(CW$part\fR string can contain more values, comma-separated.
.PP
Example:
.PP
.Vb 1
\&    part => \*(Aqsnippet,contentDetails,statistics\*(Aq
.Ve
.PP
When \f(CW$part\fR is \f(CW\*(C`undef\*(C'\fR, it defaults to \fIsnippet\fR.
.SS "Return details"
.IX Subsection "Return details"
Each function returns a \s-1HASH\s0 ref, with a key called 'results', and another key, called 'url'.
.PP
The 'url' key contains a string, which is the \s-1URL\s0 for the retrieved content.
.PP
The 'results' key contains another \s-1HASH\s0 ref with the keys 'etag', 'items' and 'kind'.
From the 'results' key, only the 'items' are relevant to us. This key contains an \s-1ARRAY\s0 ref,
with a \s-1HASH\s0 ref for each result. An example of the item array's content are shown below.
.IP "video_contentDetails($videoID)" 4
.IX Item "video_contentDetails($videoID)"
.Vb 10
\&    items => [
\&               {
\&                 contentDetails => {
\&                   caption         => "false",
\&                   definition      => "sd",
\&                   dimension       => "2d",
\&                   duration        => "PT1H20M10S",
\&                   licensedContent => bless(do{\e(my $o = 0)}, "JSON::XS::Boolean"),
\&                 },
\&                 etag => "\e"5cYuq_ImPkYn_h2RKDdX8DHvM2g/KU_bqVk91zBQGXrMtEDZgkQMkhU\e"",
\&                 id => "f6df3s3x3zo",
\&                 kind => "youtube#video",
\&               },
\&            ]
.Ve
.IP "video_id($videoID)" 4
.IX Item "video_id($videoID)"
.Vb 7
\&    items => [
\&               {
\&                 etag => "\e"5cYuq_ImPkYn_h2RKDdX8DHvM2g/bvAWXfDY4QPsx_UgtmMPFcxPLQc\e"",
\&                 id => "f6df3s3x3zo",
\&                 kind => "youtube#video",
\&               },
\&             ],
.Ve
.IP "video_player($videoID)" 4
.IX Item "video_player($videoID)"
.Vb 10
\&    items => [
\&               {
\&                 etag => "\e"5cYuq_ImPkYn_h2RKDdX8DHvM2g/nr03GopgH8bb755ppx5BA_1VsF8\e"",
\&                 id => "f6df3s3x3zo",
\&                 kind => "youtube#video",
\&                 player => {
\&                   embedHtml => "<iframe type=\*(Aqtext/html\*(Aq src=\*(Aqhttp://www.youtube.com/embed/f6df3s3x3zo\*(Aq width=\*(Aq640\*(Aq height=\*(Aq360\*(Aq frameborder=\*(Aq0\*(Aq allowfullscreen=\*(Aqtrue\*(Aq/>",
\&                 },
\&               },
\&             ],
.Ve
.IP "video_statistics($videoID)" 4
.IX Item "video_statistics($videoID)"
.Vb 10
\&    items => [
\&               {
\&                 etag => "\e"5cYuq_ImPkYn_h2RKDdX8DHvM2g/j01_qxKqxc3BMrFBbX2eiPWkAmo\e"",
\&                 id => "f6df3s3x3zo",
\&                 kind => "youtube#video",
\&                 statistics => {
\&                   commentCount  => 2,
\&                   dislikeCount  => 1,
\&                   favoriteCount => 0,
\&                   likeCount     => 5,
\&                   viewCount     => 174,
\&                 },
\&               },
\&             ],
.Ve
.IP "video_status($videoID)" 4
.IX Item "video_status($videoID)"
.Vb 10
\&    items => [
\&               {
\&                 etag => "\e"5cYuq_ImPkYn_h2RKDdX8DHvM2g/jaa690eVtSvHTYRSSPD3mc1mlIY\e"",
\&                 id => "f6df3s3x3zo",
\&                 kind => "youtube#video",
\&                 status => {
\&                   embeddable    => bless(do{\e(my $o = 1)}, "JSON::XS::Boolean"),
\&                   license       => "youtube",
\&                   privacyStatus => "public",
\&                   uploadStatus  => "processed",
\&                 },
\&               },
\&             ],
.Ve
.IP "video_topicDetails($videoID)" 4
.IX Item "video_topicDetails($videoID)"
.Vb 8
\&    items => [
\&               {
\&                 etag => "\e"5cYuq_ImPkYn_h2RKDdX8DHvM2g/XnxCuOGwiR8MNhH\-iHNxHB\-ROWM\e"",
\&                 id => "f6df3s3x3zo",
\&                 kind => "youtube#video",
\&                 topicDetails => { topicIds => ["/m/0126n", "/m/0jpv", "/m/07h44"] },
\&               },
\&             ],
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Trizen, \f(CW\*(C`<echo dHJpemVuQHByb3Rvbm1haWwuY29tCg== | base64 \-d>\*(C'\fR
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc WWW::YoutubeViewer::Videos
.Ve
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2013\-2015 Trizen.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of either: the \s-1GNU\s0 General Public License as published
by the Free Software Foundation; or the Artistic License.
.PP
See <http://dev.perl.org/licenses/> for more information.
