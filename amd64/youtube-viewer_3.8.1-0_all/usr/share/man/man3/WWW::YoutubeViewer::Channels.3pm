.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "WWW::YoutubeViewer::Channels 3pm"
.TH WWW::YoutubeViewer::Channels 3pm "2020-11-12" "perl v5.30.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
WWW::YoutubeViewer::Channels \- Channels interface.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use WWW::YoutubeViewer;
\&    my $obj = WWW::YoutubeViewer\->new(%opts);
\&    my $videos = $obj\->channels_from_categoryID($category_id);
.Ve
.SH "SUBROUTINES/METHODS"
.IX Header "SUBROUTINES/METHODS"
.SS "channels_from_categoryID($category_id)"
.IX Subsection "channels_from_categoryID($category_id)"
Return the YouTube channels associated with the specified category.
.SS "channels_info($channel_id)"
.IX Subsection "channels_info($channel_id)"
Return information for the comma-separated list of the YouTube channel \s-1ID\s0(s).
.SH "Channel details"
.IX Header "Channel details"
For all functions, \f(CW\*(C`$channels\-\*(C'\fR{results}{items}> contains:
.PP
.Vb 10
\&    [
\&       {
\&        id => "....",
\&        kind => "youtube#channel",
\&            snippet => {
\&            description => "...",
\&            publishedAt => "2010\-06\-24T23:15:37.000Z",
\&            thumbnails => {
\&                default => { url => "..." },
\&                high    => { url => "..." },
\&                medium  => { url => "..." },
\&            },
\&            title => "...",
\&          },  # end of snippet
\&       },
\&        ...
\&    ];
.Ve
.SS "\fBmy_channel()\fP"
.IX Subsection "my_channel()"
Returns info about the channel of the current authenticated user.
.SS "\fBmy_channel_id()\fP"
.IX Subsection "my_channel_id()"
Returns the channel \s-1ID\s0 of the current authenticated user.
.SS "\fBchannels_my_subscribers()\fP"
.IX Subsection "channels_my_subscribers()"
Retrieve a list of channels that subscribed to the authenticated user's channel.
.SS "channel_id_from_username($username)"
.IX Subsection "channel_id_from_username($username)"
Return the channel \s-1ID\s0 for an username.
.SS "channel_title_from_id($channel_id)"
.IX Subsection "channel_title_from_id($channel_id)"
Return the channel title for a given channel \s-1ID.\s0
.SS "channels_contentDetails($channelID)"
.IX Subsection "channels_contentDetails($channelID)"
.Vb 10
\&  {
\&    items    => [
\&                  {
\&                    contentDetails => {
\&                      relatedPlaylists => {
\&                        likes   => "LLwiIs5V6\-zX8xaYgwhRhsHQ",
\&                        uploads => "UUwiIs5V6\-zX8xaYgwhRhsHQ",
\&                      },
\&                    },
\&                    etag => "...",
\&                    id => "UCwiIs5V6\-zX8xaYgwhRhsHQ",
\&                    kind => "youtube#channel",
\&                  },
\&                ],
\&    kind     => "youtube#channelListResponse",
\&    pageInfo => { resultsPerPage => 1, totalResults => 1 },
\&  },
.Ve
.SS "channels_statistics($channelID);"
.IX Subsection "channels_statistics($channelID);"
.Vb 10
\&  {
\&    items    => [
\&                  {
\&                    etag => "...",
\&                    id => "UCwiIs5V6\-zX8xaYgwhRhsHQ",
\&                    kind => "youtube#channel",
\&                    statistics => {
\&                      commentCount    => 14,
\&                      subscriberCount => 313823,
\&                      videoCount      => 474,
\&                      viewCount       => 1654024,
\&                    },
\&                  },
\&                ],
\&    kind     => "youtube#channelListResponse",
\&    pageInfo => { resultsPerPage => 1, totalResults => 1 },
\&  },
.Ve
.SS "channels_topicDetails($channelID)"
.IX Subsection "channels_topicDetails($channelID)"
.Vb 10
\&    items    => [
\&                  {
\&                    etag => "...",
\&                    id => "UCwiIs5V6\-zX8xaYgwhRhsHQ",
\&                    kind => "youtube#channel",
\&                    topicDetails => {
\&                      topicIds => [
\&                        "/m/027lnzs",
\&                        "/m/0cp07v2",
\&                            ...
\&                      ],
\&                    },
\&                  },
\&                ],
\&    kind     => "youtube#channelListResponse",
\&    pageInfo => { resultsPerPage => 1, totalResults => 1 },
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Trizen, \f(CW\*(C`<echo dHJpemVuQHByb3Rvbm1haWwuY29tCg== | base64 \-d>\*(C'\fR
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc WWW::YoutubeViewer::Channels
.Ve
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2013\-2015 Trizen.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of either: the \s-1GNU\s0 General Public License as published
by the Free Software Foundation; or the Artistic License.
.PP
See <http://dev.perl.org/licenses/> for more information.
