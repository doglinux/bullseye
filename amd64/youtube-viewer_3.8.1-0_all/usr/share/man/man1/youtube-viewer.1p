.\" Automatically generated by Pod::Man 4.11 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "YOUTUBE-VIEWER 1p"
.TH YOUTUBE-VIEWER 1p "2020-11-12" "perl v5.30.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
youtube\-viewer \- YouTube from command line.
.PP
See: youtube\-viewer \-\-help
     youtube\-viewer \-\-tricks
     youtube\-viewer \-\-examples
     youtube\-viewer \-\-stdin\-help
.SH "CONFIGURATION OPTIONS"
.IX Header "CONFIGURATION OPTIONS"
.SS "auto_captions"
.IX Subsection "auto_captions"
When set to \f(CW1\fR, auto-generated captions will be retrieved. By default, auto-generated captions are ignored.
.SS "autoplay_mode"
.IX Subsection "autoplay_mode"
Enable autoplay mode, which will continuously play related videos.
.SS "cache_dir"
.IX Subsection "cache_dir"
Cache directory where to save temporary files.
.SS "colors"
.IX Subsection "colors"
Use colors for text.
.SS "comments_order"
.IX Subsection "comments_order"
The sorting order for comments. Valid values: \*(L"time\*(R", \*(L"relevance\*(R".
.SS "confirm"
.IX Subsection "confirm"
Display a confirmation message after each video played.
.SS "convert_cmd"
.IX Subsection "convert_cmd"
Command to convert videos.
.PP
Default value:
.PP
.Vb 1
\&    "ffmpeg \-i *IN* *OUT*"
.Ve
.PP
\&\fB*IN*\fR gets replaced with the input file.
.PP
\&\fB*OUT*\fR gets replaced with the output file.
.SS "convert_to"
.IX Subsection "convert_to"
Format to convert each downloaded video into. (e.g.: \f(CW"mp3"\fR).
.SS "cookie_file"
.IX Subsection "cookie_file"
Load cookies from a file. Useful to overcome the \*(L"429: Too Many Requests\*(R" issue.
.PP
The file must be a \f(CW\*(C`# Netscape HTTP Cookie File\*(C'\fR. Same format as \f(CW\*(C`youtube\-dl\*(C'\fR requires.
.PP
See also:
.PP
.Vb 1
\&    https://github.com/ytdl\-org/youtube\-dl#how\-do\-i\-pass\-cookies\-to\-youtube\-dl
.Ve
.SS "copy_caption"
.IX Subsection "copy_caption"
When downloading a video, copy the closed-caption (if any) in the same folder with the video.
.PP
If \f(CW\*(C`merge_into_mkv\*(C'\fR and \f(CW\*(C`merge_with_captions\*(C'\fR are both enabled, there is no need to enable this option.
.SS "custom_layout"
.IX Subsection "custom_layout"
Use a custom layout for video results, defined in \f(CW\*(C`custom_layout_format\*(C'\fR.
.PP
Requires: Unicode::GCString or Text::CharWidth.
.SS "custom_layout_format"
.IX Subsection "custom_layout_format"
An array of hash values specifying a custom layout for video results.
.PP
.Vb 4
\&    align       # "left" or "right"
\&    color       # any color supported by Term::ANSIColor
\&    text        # the actual text
\&    width       # width allocated for the text
.Ve
.PP
The value for \f(CW\*(C`width\*(C'\fR can be either a number of characters (e.g.: 20) or can be a percentage of the terminal width (e.g.: \*(L"15%\*(R").
.PP
The special tokens for \f(CW\*(C`text\*(C'\fR are listed in:
.PP
.Vb 1
\&    youtube\-viewer \-\-tricks
.Ve
.SS "dash_mp4_audio"
.IX Subsection "dash_mp4_audio"
Include or exclude \s-1MP4/M4A\s0 (\s-1AAC\s0) audio files.
.SS "dash_segmented"
.IX Subsection "dash_segmented"
Include or exclude streams in \*(L"Dynamic Adaptive Streaming over \s-1HTTP\*(R"\s0 (\s-1DASH\s0) format.
.SS "dash_support"
.IX Subsection "dash_support"
Enable or disable support for split videos.
.SS "debug"
.IX Subsection "debug"
Enable debug/verbose mode, which will print some extra information.
.PP
Valid values: 0, 1, 2, 3.
.SS "download_and_play"
.IX Subsection "download_and_play"
Play downloaded videos.
.SS "download_with_wget"
.IX Subsection "download_with_wget"
Download videos with \f(CW\*(C`wget\*(C'\fR.
.SS "downloads_dir"
.IX Subsection "downloads_dir"
Directory where to download files and where to save converted files.
.SS "env_proxy"
.IX Subsection "env_proxy"
Load proxy settings from \f(CW*_proxy\fR environment variables (if any).
.SS "fat32safe"
.IX Subsection "fat32safe"
When downloading a video, make the filename compatible with the \s-1FAT32\s0 filesystem.
.SS "ffmpeg_cmd"
.IX Subsection "ffmpeg_cmd"
Path to the \f(CW\*(C`ffmpeg\*(C'\fR program.
.SS "fullscreen"
.IX Subsection "fullscreen"
Play videos in fullscreen mode.
.SS "get_captions"
.IX Subsection "get_captions"
Download closed-captions for videos (if any).
.SS "get_term_width"
.IX Subsection "get_term_width"
Read the terminal width (`stty size`).
.SS "hfr"
.IX Subsection "hfr"
Include or exclude High Frame Rate (\s-1HFR\s0) videos.
.SS "highlight_color"
.IX Subsection "highlight_color"
Highlight color used to highlight watched videos.
.PP
Any color supported by Term::ANSIColor can be used.
.SS "highlight_watched"
.IX Subsection "highlight_watched"
Highlight watched videos.
.SS "history"
.IX Subsection "history"
Enable or disable support for input history.
.PP
Requires Term::ReadLine::Gnu.
.SS "history_file"
.IX Subsection "history_file"
File where to save the input history.
.SS "history_limit"
.IX Subsection "history_limit"
Maximum number of entries in the history file.
.PP
When the limit is reached, the first half of the history file will be deleted.
.PP
Set the value to \f(CW\*(C`\-1\*(C'\fR for no limit.
.SS "hl"
.IX Subsection "hl"
Language code for categories. Default: \*(L"en_US\*(R".
.SS "http_proxy"
.IX Subsection "http_proxy"
Set \s-1HTTP\s0(S)/SOCKS proxy, using the format:
.PP
.Vb 1
\&    proto://domain.tld:port/
.Ve
.PP
If authentication is required, use:
.PP
.Vb 1
\&    proto://user:pass@domain.tld:port/
.Ve
.SS "ignore_av1"
.IX Subsection "ignore_av1"
Ignore videos in \s-1AV1\s0 format.
.SS "interactive"
.IX Subsection "interactive"
Interactive mode, prompting for user-input.
.SS "keep_original_video"
.IX Subsection "keep_original_video"
Keep the original video after conversion. When set to \f(CW0\fR, the original video will be deleted.
.SS "maxResults"
.IX Subsection "maxResults"
How many results to display per page.
.SS "merge_into_mkv"
.IX Subsection "merge_into_mkv"
During download, merge the audio+video files into an \s-1MKV\s0 container.
.PP
Requires \f(CW\*(C`ffmpeg\*(C'\fR.
.SS "merge_into_mkv_args"
.IX Subsection "merge_into_mkv_args"
Arguments for \f(CW\*(C`ffmpeg\*(C'\fR how to merge the files.
.SS "merge_with_captions"
.IX Subsection "merge_with_captions"
Include closed-captions inside the \s-1MKV\s0 container (if any).
.SS "order"
.IX Subsection "order"
Search order for videos.
.PP
Valid values:
.PP
.Vb 6
\&    date       – Sorted in reverse chronological order.
\&    rating     – Sorted from highest to lowest rating.
\&    relevance  – By relevance to the search query. (default)
\&    title      – Sorted alphabetically by title.
\&    videoCount – Sory by number of videos (for channels).
\&    viewCount  – Sorted from highest to lowest number of views.
.Ve
.SS "page"
.IX Subsection "page"
Page number of results.
.SS "prefer_av1"
.IX Subsection "prefer_av1"
Prefer videos in \s-1AV1\s0 format. (just for testing)
.SS "prefer_mp4"
.IX Subsection "prefer_mp4"
Prefer videos in \s-1MP4\s0 (\s-1AVC\s0) format.
.SS "publishedAfter"
.IX Subsection "publishedAfter"
The \f(CW\*(C`publishedAfter\*(C'\fR option indicates that the \s-1API\s0 response should only contain resources created at or after the specified time. The value is an \s-1RFC 3339\s0 formatted date-time value (1970\-01\-01T00:00:00Z).
.SS "publishedBefore"
.IX Subsection "publishedBefore"
The \f(CW\*(C`publishedBefore\*(C'\fR option indicates that the \s-1API\s0 response should only contain resources created before or at the specified time. The value is an \s-1RFC 3339\s0 formatted date-time value (1970\-01\-01T00:00:00Z).
.SS "regionCode"
.IX Subsection "regionCode"
The \f(CW\*(C`regionCode\*(C'\fR option instructs the \s-1API\s0 to return search results for videos that can be viewed in the specified country. The parameter value is an \s-1ISO 3166\-1\s0 alpha\-2 country code. (default: \*(L"\s-1US\*(R"\s0)
.SS "remove_played_file"
.IX Subsection "remove_played_file"
When \f(CW\*(C`download_and_play\*(C'\fR is enabled, remove the file after playing it.
.SS "resolution"
.IX Subsection "resolution"
Preferred resolution for videos.
.PP
Valid values: best, 2160p, 1440p, 1080p, 720p, 480p, 360p, 240p, 144p, audio.
.SS "results_fixed_width"
.IX Subsection "results_fixed_width"
Results in fixed-width format.
.PP
Requires: Unicode::GCString or Text::CharWidth.
.SS "results_with_colors"
.IX Subsection "results_with_colors"
Results with colors.
.SS "results_with_details"
.IX Subsection "results_with_details"
Results with extra details.
.SS "safeSearch"
.IX Subsection "safeSearch"
The \f(CW\*(C`safeSearch\*(C'\fR option indicates whether the search results should include restricted content as well as standard content.
.PP
Valid values: \*(L"strict\*(R", \*(L"moderate\*(R", \*(L"none\*(R".
.SS "show_video_info"
.IX Subsection "show_video_info"
Show extra info for videos when selected.
.SS "skip_if_exists"
.IX Subsection "skip_if_exists"
When downloading, skip if the file already exists locally.
.SS "skip_watched"
.IX Subsection "skip_watched"
Skip already watched/downloaded videos.
.SS "srt_languages"
.IX Subsection "srt_languages"
List of \s-1SRT\s0 languages in the order of preference.
.SS "subscriptions_order"
.IX Subsection "subscriptions_order"
Sorting order for subscriptions.
.PP
Valid values:
.PP
.Vb 3
\&    alphabetical – Sort alphabetically.
\&    relevance    – Sort by relevance.
\&    unread       – Sort by order of activity.
.Ve
.SS "thousand_separator"
.IX Subsection "thousand_separator"
Thousands separator character for numbers >= 1000.
.SS "timeout"
.IX Subsection "timeout"
\&\s-1HTTPS\s0 timeout value in seconds. The default value is 10 seconds.
.SS "user_agent"
.IX Subsection "user_agent"
Token that is used to identify the user agent on the network. The agent value is sent as the \f(CW\*(C`User\-Agent\*(C'\fR header in the requests.
.SS "video_filename_format"
.IX Subsection "video_filename_format"
The format of filename for downloaded files.
.PP
The available special tokens are listed in:
.PP
.Vb 1
\&    youtube\-viewer \-\-tricks
.Ve
.SS "video_player_selected"
.IX Subsection "video_player_selected"
The selected video player defined the \f(CW\*(C`video_players\*(C'\fR table.
.SS "video_players"
.IX Subsection "video_players"
A table of video players.
.PP
The keys for each player are:
.PP
.Vb 6
\&    arg        # any arguments for the video player
\&    audio      # option specifying the *AUDIO* file
\&    cmd        # the main player command
\&    fs         # the fullscreen option
\&    novideo    # the no\-video mode option
\&    srt        # option specifying the *SUB* file
.Ve
.SS "videoCaption"
.IX Subsection "videoCaption"
The \f(CW\*(C`videoCaption\*(C'\fR option indicates whether the \s-1API\s0 should filter video search results based on whether they have captions.
.PP
Valid values:
.PP
.Vb 3
\&    any           – Do not filter results based on caption availability.
\&    closedCaption – Only include videos that have captions.
\&    none          – Only include videos that do not have captions.
.Ve
.SS "videoDefinition"
.IX Subsection "videoDefinition"
The \f(CW\*(C`videoDefinition\*(C'\fR option lets you restrict a search to only include either high definition (\s-1HD\s0) or standard definition (\s-1SD\s0) videos.
.PP
Valid values:
.PP
.Vb 3
\&    any      – Return all videos, regardless of their resolution.
\&    high     – Only retrieve HD videos.
\&    standard – Only retrieve videos in standard definition.
.Ve
.SS "videoDimension"
.IX Subsection "videoDimension"
The \f(CW\*(C`videoDimension\*(C'\fR option lets you restrict a search to only retrieve 2D or 3D videos.
.PP
Valid values:
.PP
.Vb 3
\&    2d  – Restrict search results to exclude 3D videos.
\&    3d  – Restrict search results to only include 3D videos.
\&    any – Include both 3D and non\-3D videos in returned results.
.Ve
.SS "videoDuration"
.IX Subsection "videoDuration"
The \f(CW\*(C`videoDuration\*(C'\fR parameter filters video search results based on their duration.
.PP
Valid values: \*(L"any\*(R", \*(L"short\*(R", \*(L"long\*(R".
.PP
Valid values:
.PP
.Vb 4
\&    any     – Do not filter video search results based on their duration.
\&    long    – Only include videos longer than 20 minutes.
\&    medium  – Only include videos that are between 4\-20 minutes.
\&    short   – Only include videos that are less than 4 minutes long.
.Ve
.SS "videoLicense"
.IX Subsection "videoLicense"
The \f(CW\*(C`videoLicense\*(C'\fR option filters search results to only include videos with a particular license.
.PP
Valid values:
.PP
.Vb 3
\&    any            – All videos, regardless of which license they have.
\&    creativeCommon – Only return videos that have a "Creative Commons" license.
\&    youtube        – Only return videos that have the standard YouTube license.
.Ve
.SS "videoSyndicated"
.IX Subsection "videoSyndicated"
The \f(CW\*(C`videoSyndicated\*(C'\fR option lets you to restrict a search to only videos that can be played outside \fByoutube.com\fR.
.PP
Valid values:
.PP
.Vb 2
\&    any  – Return all videos, syndicated or not.
\&    true – Only retrieve syndicated videos.
.Ve
.SS "watch_history"
.IX Subsection "watch_history"
Remember watched videos across multiple sessions.
.PP
The video IDs are saved in the filename specified by \f(CW\*(C`watch_history_file\*(C'\fR.
.PP
This option is also required for \f(CW\*(C`\-\-watched\-videos\*(C'\fR.
.SS "watch_history_file"
.IX Subsection "watch_history_file"
File where to save the video IDs of watched/downloaded videos when \f(CW\*(C`watch_history\*(C'\fR is set to a true value.
.SS "wget_cmd"
.IX Subsection "wget_cmd"
Command for \f(CW\*(C`wget\*(C'\fR when \f(CW\*(C`download_with_wget\*(C'\fR is set to a true value.
.SS "youtube_users_file"
.IX Subsection "youtube_users_file"
Path to a list of YouTube channels, using the following format:
.PP
.Vb 1
\&    ChannelID NAME
.Ve
.PP
The channels can be listed with the command-line option: \f(CW\*(C`\-fc\*(C'\fR.
.SS "youtube_video_url"
.IX Subsection "youtube_video_url"
Format for \f(CW\*(C`sprintf()\*(C'\fR for constructing an YouTube video \s-1URL\s0 given the video \s-1ID.\s0
.SS "ytdl"
.IX Subsection "ytdl"
Use \f(CW\*(C`youtube\-dl\*(C'\fR for videos with encrypted signatures.
.PP
When set to \f(CW0\fR, invidious instances will be used instead.
.SS "ytdl_cmd"
.IX Subsection "ytdl_cmd"
Command for \f(CW\*(C`youtube\-dl\*(C'\fR when \f(CW\*(C`ytdl\*(C'\fR is set to a true value.
.SH "CONFIGURATION FILES"
.IX Header "CONFIGURATION FILES"
The configuration files are:
.PP
.Vb 2
\&    ~/.config/youtube\-viewer/youtube\-viewer.conf
\&    ~/.config/youtube\-viewer/gtk\-youtube\-viewer.conf
.Ve
.SH "YOUTUBE API REFERENCE"
.IX Header "YOUTUBE API REFERENCE"
https://developers.google.com/youtube/v3/docs/
.SH "REPOSITORY"
.IX Header "REPOSITORY"
https://github.com/trizen/youtube\-viewer
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright 2010\-2020 Trizen.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of either: the \s-1GNU\s0 General Public License as published
by the Free Software Foundation; or the Artistic License.
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE.\s0
.PP
See <https://dev.perl.org/licenses/> for more information.
